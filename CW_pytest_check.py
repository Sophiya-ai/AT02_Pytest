import pytest

from CW_check import check


def test_check():
    assert check(6) == True


def test_check2():
    assert check(3) == False


# Теперь нам надо передать большое количество параметров.
# Для этого понадобится декоратор, который есть в PyTest, для параметризованных тестов.
# Два аргумента:
# - первый "number, expected" — это строка с названиями параметров, которые будем передавать в тестовую функцию.
# - второй аргумент — это список кортежей, каждый из которых содержит значения для этих параметров.
# Каждый кортеж представляет собой набор данных для одного запуска теста, например:
# (2, True) означает, что на вход тестовой функции будет передано число 2, и ожидаемый результат для этого числа — True.
# Таким образом, тестовая функция будет запускаться несколько раз, по одному разу для каждого кортежа из списка
@pytest.mark.parametrize('number, expected', [
    (2, True),
    (5, False),
    (56, True),
    (-3, False),
    (0, True)
])
#В круглых скобках после имени функции test_check_with_param мы указали два параметра: number и expected.
# Эти параметры принимают значение числа, которое мы будем проверять, и ожидаемого результата.
# Далее внутри функции мы используем ключевое слово assert и вызываем функцию check, передавая ей число number.
# Мы проверяем, равен ли результат выполнения функции check значению expected,
# которое мы заранее задали для данного числа
def test_check_with_param(number, expected):
    assert check(number) == expected
